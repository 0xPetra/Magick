import { TypedUseSelectorHook } from 'react-redux';
import type { RootState } from './store';
export declare const useAppDispatch: () => import("redux-thunk").ThunkDispatch<import("redux").EmptyObject & {
    tabs: import("@reduxjs/toolkit").EntityState<import("./tabs").Tab>;
    preferences: {
        autoSave: boolean;
        doNotShowUnlockWarning: boolean;
    };
    api: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        getSpells: import("@reduxjs/toolkit/dist/query").QueryDefinition<string, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell[], "api">;
        getSpell: import("@reduxjs/toolkit/dist/query").QueryDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        runSpell: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("./api/spells").RunSpell, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Record<string, any>, "api">;
        saveDiff: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("./api/spells").Diff, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", void, "api">;
        spellExists: import("@reduxjs/toolkit/dist/query").MutationDefinition<string, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", boolean, "api">;
        saveSpell: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("@thothai/thoth-core/types").Spell | Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Partial<import("@thothai/thoth-core/types").Spell>, "api">;
        newSpell: import("@reduxjs/toolkit/dist/query").MutationDefinition<Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        patchSpell: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("./api/spells").PatchArgs, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        deleteSpell: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", string[], "api">;
        deploySpell: import("@reduxjs/toolkit/dist/query").MutationDefinition<import("./api/spells").DeployArgs, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
        getDeployments: import("@reduxjs/toolkit/dist/query").QueryDefinition<string, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion[], "api">;
        getDeployment: import("@reduxjs/toolkit/dist/query").QueryDefinition<import("./api/spells").GetDeployArgs, import("@reduxjs/toolkit/dist/query").BaseQueryFn<string | import("@reduxjs/toolkit/dist/query").FetchArgs, unknown, import("@reduxjs/toolkit/dist/query").FetchBaseQueryError, {}, import("@reduxjs/toolkit/dist/query").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
    }, "Spell" | "Spells" | "Version", "api">;
    config: import("./admin/config/configState").State;
    scope: import("./admin/scope/scopeState").State;
    client: import("./admin/clientS/clientState").State;
} & import("redux-persist/es/persistReducer").PersistPartial, undefined, import("redux").AnyAction> & import("redux").Dispatch<import("redux").AnyAction>;
export declare const useAppSelector: TypedUseSelectorHook<RootState>;
