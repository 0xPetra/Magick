/// <reference types="redux-persist/types/persistreducer" />
/// <reference types="redux-persist/types/types" />
/// <reference types="redux-persist" />
import { ThunkAction, Action } from '@reduxjs/toolkit';
export declare const store: import("@reduxjs/toolkit").EnhancedStore<import("redux").EmptyObject & {
    tabs: import("@reduxjs/toolkit").EntityState<import("./tabs").Tab>;
    preferences: {
        autoSave: boolean;
        doNotShowUnlockWarning: boolean;
    };
    api: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        getSpells: import("@reduxjs/toolkit/query/react").QueryDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell[], "api">;
        getSpell: import("@reduxjs/toolkit/query/react").QueryDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        runSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").RunSpell, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Record<string, any>, "api">;
        saveDiff: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").Diff, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", void, "api">;
        spellExists: import("@reduxjs/toolkit/query/react").MutationDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", boolean, "api">;
        saveSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("@thothai/thoth-core/types").Spell | Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Partial<import("@thothai/thoth-core/types").Spell>, "api">;
        newSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        patchSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").PatchArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        deleteSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", string[], "api">;
        deploySpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").DeployArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
        getDeployments: import("@reduxjs/toolkit/query/react").QueryDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion[], "api">;
        getDeployment: import("@reduxjs/toolkit/query/react").QueryDefinition<import("./api/spells").GetDeployArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
    }, "Spell" | "Spells" | "Version", "api">;
    config: import("./admin/config/configState").State;
    scope: import("./admin/scope/scopeState").State;
    client: import("./admin/clientS/clientState").State;
} & import("redux-persist/es/persistReducer").PersistPartial, import("redux").AnyAction, import("@reduxjs/toolkit").MiddlewareArray<[import("redux-thunk").ThunkMiddleware<import("redux").EmptyObject & {
    tabs: import("@reduxjs/toolkit").EntityState<import("./tabs").Tab>;
    preferences: {
        autoSave: boolean;
        doNotShowUnlockWarning: boolean;
    };
    api: import("@reduxjs/toolkit/dist/query/core/apiState").CombinedState<{
        getSpells: import("@reduxjs/toolkit/query/react").QueryDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell[], "api">;
        getSpell: import("@reduxjs/toolkit/query/react").QueryDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        runSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").RunSpell, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Record<string, any>, "api">;
        saveDiff: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").Diff, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", void, "api">;
        spellExists: import("@reduxjs/toolkit/query/react").MutationDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", boolean, "api">;
        saveSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("@thothai/thoth-core/types").Spell | Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Partial<import("@thothai/thoth-core/types").Spell>, "api">;
        newSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        patchSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").PatchArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
        deleteSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", string[], "api">;
        deploySpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").DeployArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
        getDeployments: import("@reduxjs/toolkit/query/react").QueryDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion[], "api">;
        getDeployment: import("@reduxjs/toolkit/query/react").QueryDefinition<import("./api/spells").GetDeployArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
    }, "Spell" | "Spells" | "Version", "api">;
    config: import("./admin/config/configState").State;
    scope: import("./admin/scope/scopeState").State;
    client: import("./admin/clientS/clientState").State;
} & import("redux-persist/es/persistReducer").PersistPartial, import("redux").AnyAction, undefined>, import("redux").Middleware<{}, import("@reduxjs/toolkit/dist/query/core/apiState").RootState<{
    getSpells: import("@reduxjs/toolkit/query/react").QueryDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell[], "api">;
    getSpell: import("@reduxjs/toolkit/query/react").QueryDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
    runSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").RunSpell, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Record<string, any>, "api">;
    saveDiff: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").Diff, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", void, "api">;
    spellExists: import("@reduxjs/toolkit/query/react").MutationDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", boolean, "api">;
    saveSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("@thothai/thoth-core/types").Spell | Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", Partial<import("@thothai/thoth-core/types").Spell>, "api">;
    newSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<Partial<import("@thothai/thoth-core/types").Spell>, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
    patchSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").PatchArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("@thothai/thoth-core/types").Spell, "api">;
    deleteSpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").UserSpellArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", string[], "api">;
    deploySpell: import("@reduxjs/toolkit/query/react").MutationDefinition<import("./api/spells").DeployArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
    getDeployments: import("@reduxjs/toolkit/query/react").QueryDefinition<string, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion[], "api">;
    getDeployment: import("@reduxjs/toolkit/query/react").QueryDefinition<import("./api/spells").GetDeployArgs, import("@reduxjs/toolkit/query/react").BaseQueryFn<string | import("@reduxjs/toolkit/query/react").FetchArgs, unknown, import("@reduxjs/toolkit/query/react").FetchBaseQueryError, {}, import("@reduxjs/toolkit/query/react").FetchBaseQueryMeta>, "Spell" | "Spells" | "Version", import("./api/spells").DeployedSpellVersion, "api">;
}, string, "api">, import("@reduxjs/toolkit").ThunkDispatch<any, any, import("redux").AnyAction>>]>>;
export declare const persistor: import("redux-persist").Persistor;
export declare type AppDispatch = typeof store.dispatch;
export declare type RootState = ReturnType<typeof store.getState>;
export declare type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;
